name: Build Nethunter Kernel

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu bc bison flex libssl-dev make
          sudo apt-get install -y debhelper-compat libelf-dev android-sdk-libsparse-utils
          sudo apt install binfmt-support qemu-user-static gcc-10-aarch64-linux-gnu mkbootimg bison flex gcc-aarch64-linux-gnu pkg-config libncurses-dev libssl-dev unzip git
          sudo apt-get install -y \
            llvm lld lldb clang gcc binutils flex bison \
            build-essential git gcc g++ \
            gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf \
            gcc-arm-linux-gnueabi gcc-arm-linux-gnueabi
          
          # Download and extract Neutron Clang
          wget -q https://github.com/Neutron-Toolchains/clang-build-catalogue/releases/download/10032024/neutron-clang-10032024.tar.zst -O neutron-clang.tar.zst
          mkdir clang
          tar -I zstd -xf neutron-clang.tar.zst -C clang/
          export PATH=$GITHUB_WORKSPACE/clang/bin:$PATH
          clang --version

      - name: Build Kernel
        run: |
          export KERNEL_DIR=${GITHUB_WORKSPACE}/kernel
          export ANYKERNEL3_DIR=${GITHUB_WORKSPACE}/kernel/AnyKernel3
          export ARTIFACT=Image.gz-dtb
          export FINAL_KERNEL_ZIP=kernel.zip
          export CROSS_COMPILE_ARM64=aarch64-linux-gnu-
          export CROSS_COMPILE_ARM32=arm-linux-gnueabi-
          git clone https://github.com/akm-04/InfiniR_Nethunter_alioth -b Nethunter_android-15 kernel
          cd kernel
          export PATH=$GITHUB_WORKSPACE/clang/bin:$PATH
          make O=out ARCH=arm64 CC=${CLANG_PATH}/clang CROSS_COMPILE=${CROSS_COMPILE_ARM64} CROSS_COMPILE_COMPAT=${CROSS_COMPILE_ARM32} AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip LLVM=1 LLVM_IAS=1 alioth_Nethunter_defconfig
          make O=out ARCH=arm64 CC=${CLANG_PATH}/clang CROSS_COMPILE=${CROSS_COMPILE_ARM64} CROSS_COMPILE_COMPAT=${CROSS_COMPILE_ARM32} AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip LLVM=1 LLVM_IAS=1 -j$(nproc)

      - name: Build Modules (if necessary)
        if: ${{ env.BUILD_MODULES == 'y' }}
        run: |
          cd $GITHUB_WORKSPACE/kernel
          make O=out CC=${CLANG_PATH}/clang CROSS_COMPILE=${CROSS_COMPILE_ARM64} CROSS_COMPILE_COMPAT=${CROSS_COMPILE_ARM32} AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip LLVM=1 LLVM_IAS=1 modules_prepare
          make O=out CC=${CLANG_PATH}/clang CROSS_COMPILE=${CROSS_COMPILE_ARM64} CROSS_COMPILE_COMPAT=${CROSS_COMPILE_ARM32} AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip LLVM=1 LLVM_IAS=1 modules INSTALL_MOD_PATH="$KERNEL_DIR"/out/modules

      - name: Create Flashable ZIP
        run: |
          cd $ANYKERNEL3_DIR
          cp $KERNEL_DIR/out/arch/arm64/boot/$ARTIFACT $ANYKERNEL3_DIR/
          if [ "$BUILD_DTBOIMG" = "1" ]; then
            cp $KERNEL_DIR/out/arch/arm64/boot/dtbo.img $ANYKERNEL3_DIR/dtbo.img
          fi
          zip -r9 $FINAL_KERNEL_ZIP * -x README

      - name: Upload Kernel ZIP Artifact
        uses: actions/upload-artifact@v3
        with:
          name: kernel-zip
          path: $ANYKERNEL3_DIR/$FINAL_KERNEL_ZIP

      - name: Upload Module ZIP (if built)
        if: ${{ env.BUILD_MODULES == 'y' }}
        uses: actions/upload-artifact@v3
        with:
          name: module-zip
          path: $KERNEL_DIR/Mod/${MOD_NAME}
