name: Build and Upload lk2nd

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  # Trigger release creation on tag push
  release:
    types: [created]

jobs:
  # Step 1: Compile and rename lk2nd image
  build:
    runs-on: ubuntu-latest
    outputs:
      img_path: ${{ steps.build.outputs.img_path }}
      version: ${{ steps.build.outputs.version }}

    steps:
      # Step 1.1: Clone the repository
      - name: Clone lk2nd repository
        run: |
          git clone https://github.com/msm8916-mainline/lk2nd.git
          cd lk2nd
          sudo apt-get install gcc-arm-none-eabi device-tree-compiler libfdt-dev tar python3-pyasn1-modules python3-pycryptodome
          
      # Step 1.2: Find and loop through mk files and compile
      - name: Compile lk2nd for each version
        id: build
        run: |
          cd lk2nd/project
          mk_files=$(find . -type f -name "lk2nd-*.mk")
          if [ -z "$mk_files" ]; then
            echo "No mk files found matching the pattern lk2nd-xxxx.mk"
            exit 1
          fi

          for mk_file in $mk_files; do
            if [[ "$mk_file" =~ lk2nd-(.*)\.mk ]]; then
              version="${BASH_REMATCH[1]}"
              echo "Found mk file: $mk_file"
              echo "Version: $version"
              
              # Build the corresponding lk2nd with the extracted version
              cd ../..
              make TOOLCHAIN_PREFIX=arm-none-eabi- lk2nd-msm$version

              # Rename the output image file
              build_folder="build-lk2nd-msm$version"
              img_file="$build_folder/lk2nd.img"
              renamed_img="lk2nd-msm$version.img"

              if [ -f "$img_file" ]; then
                mv "$img_file" "$renamed_img"
                echo "Renamed $img_file to $renamed_img"
                echo "img_path=$PWD/$renamed_img" >> $GITHUB_ENV
                echo "version=$version" >> $GITHUB_ENV
              else
                echo "lk2nd.img not found in $build_folder, skipping rename"
                exit 1
              fi
            else
              echo "Skipping non-matching mk file: $mk_file"
            fi
          done

  # Step 2: Upload image to GitHub Release
  upload:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Step 2.1: Upload the renamed image to GitHub Release
      - name: Upload image to GitHub Release
        run: |
          if [ -z "${{ needs.build.outputs.version }}" ]; then
            echo "No version found, skipping upload."
            exit 1
          fi
          
          img_file="${{ needs.build.outputs.img_path }}"
          version="${{ needs.build.outputs.version }}"
          echo "Uploading $img_file to GitHub Release for version $version"
          
          # Create a release using GitHub API
          release_response=$(curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
                  "tag_name": "v'$version'",
                  "name": "Release '$version'",
                  "body": "Release of lk2nd-msm'$version'.img",
                  "draft": false,
                  "prerelease": false
                }' \
            https://api.github.com/repos/${{ github.repository }}/releases)

          # Extract the release ID
          release_id=$(echo $release_response | jq -r .id)

          if [ "$release_id" == "null" ]; then
            echo "Failed to create GitHub release. Exiting."
            exit 1
          fi

          # Upload the renamed image to the release
          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @"$img_file" \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/$release_id/assets?name=$img_file"
          
          echo "File uploaded successfully."
